PROGRAM ::= FUNCTIONS CITY
FUNCTIONS ::= FUNCTION FUNCTIONS | epsilon
CITY ::= city name { BLOCKS }
BLOCKS ::= BLOCK MOREBLOCKS
MOREBLOCKS ::= BLOCK MOREBLOCKS | epsilon

BLOCK ::= ROAD | BIKEPATH | TOURPATH | CORRIDOR | BUILDING | RIVER | PARK | MARKPOINT
ROAD ::= road name { COMMANDS }
BIKEPATH ::= bikePath name { COMMANDS }
TOURPATH ::= bikeTourPath name { COMMANDS }
CORRIDOR ::= bikeCorridor name { COMMANDS }
BUILDING ::= building name { COMMANDS }
RIVER ::= river name { COMMANDS }
PARK ::= park name { COMMANDS }

MARKPOINT ::= BIKESTAND | BIKESHED | MBAJK | RENTBIKE
BIKESTAND ::= bikeStand(integer) name { POINTORVAR }
BIKESHED ::= bikeShed name { POINTORVAR }
MBAJK ::= mBajk name { POINTORVAR }
RENTBIKE ::= rentBike name { POINTORVAR }


COMMANDS ::= COMMAND MORECOMMANDS
MORECOMMANDS ::= COMMAND MORECOMMANDS | epsilon
COMMAND ::= LINE | BEND | BOX | FOR | IF | VARIABLE | CONST | ASSIGNMENT
LINE ::= line( POINTORVAR , POINTORVAR , WIDTH )
BEND ::= bend( POINTORVAR , POINTORVAR , ANGLE )
ANGLE ::= integer | variable_name    //integer ::= [0-9]+
WIDTH ::= integer | variable_name
BOX ::= box( POINTORVAR , POINTORVAR )
POINTORVAR ::= POINT | identifier
FOR ::= for ( SPR to SPR ) { COMMANDS }
IF ::= if ( SPR OPERATOR SPR ) { COMMANDS } ELSEORELSEIFSELSE
ELSEORELSEIFSELSE :: = ELSE | ELSEIFSELSE | epsilon
ELSEIFSELSE ::= ELSEIFS ELSE
ELSEIFS ::= ELSEIF MOREELSEIFS
MOREELSEIFS ::= ELSEIF MOREELSEIFS | epsilon
ELSEIF ::= elseif ( SPR OPERATOR SPR ) { COMMANDS }
ELSE ::= else { COMMANDS }
OPERATOR ::= > | => | <= | < | == | !=
SPR ::= float | variable_name | integer
POINT ::= ( EXPR , EXPR )
VARIABLE ::= var variable_name = VALUE  //variable_name = [a-zA-Z]+
CONST ::= const variable_name = VALUE
ASSIGNMENT ::= variable_name = VALUE
VALUE ::= float | integer | variable_name | POINT | CALL
CALL ::= call name ( CALLARGS )
CALLARGS ::= VARIABLENAMEORNUMBER MOREVORN
MOREVORN ::= , VARIABLENAMEORNUMBER MOREVORN | epsilon
VARIABLENAMEORNUMBER ::= variable_name | integer | float
FUNCTION ::= func name ( ARGS ) { COMMANDS RETURN }
ARGS ::= variable_name MOREVARS | epsilon
MOREVARS ::= , variable_name MOREVARS | epsilon
RETURN ::= return RETURNVALUE
RETURNVALUE ::= POINT | float | variable_name | integer
EXPR ::= E
E ::= T EE
EE ::= + T EE | - T EE | epsilon
T ::= X TT
TT ::= * X TT | / X TT | epsilon
X ::= Y XX
XX ::= ^ X | epsilon
Y ::= - F | + F | F
F ::= ( E ) | float | variable_name | integer